@{
    ViewData["Title"] = "Home Page";
}
<div class="text-center">
    <form id="UserDetails" v-show="Visible">
        <p v-if="errors.length">
            <ul>
                <li v-for="error in errors">
                    <div class="alert">
                        <strong>{{ error }}</strong>
                    </div>
                </li>
            </ul>
        </p>
        <p>
            <h4>Please Enter Details Below</h4>
        </p>
        <p>
            <label for="Forname">Forname</label>
            <input id="Forname"
                   v-model="Forname"
                   type="text"
                   name="Forname">
        </p>
        <p>
            <label for="Surname">Surname</label>
            <input id="Surname"
                   v-model="Surname"
                   type="text"
                   name="Surname">
        </p>
        <p>
            <label for="DateOfBirth">Date Of Birth</label>
            <input id="DateOfBirth"
                   v-model="DateOfBirth"
                   type="date"
                   name="DateOfBirth">
        </p>
        <p>
            <label for="Email">Email</label>
            <input id="Email"
                   v-model="Email"
                   type="text"
                   name="Email">
        </p>
        <p>
            <input type="submit" value="Submit" v-on:click="CheckDetails">
        </p>
    </form>
    <form id="MortgageDetails" v-show="Visible">
        <p v-if="errors.length">
            <ul>
                <li v-for="error in errors">
                    <div class="alert">
                        <strong>{{ error }}</strong>
                    </div>
                </li>
            </ul>
        </p>
        <p>
            <h4>Please Enter Details Below</h4>
        </p>
        <p>
            <label for="PropertyValue">Enter Property Value</label>
            <input id="PropertyValue"
                   v-model="PropertyValue"
                   type="number"
                   name="PropertyValue">
        </p>
        <p>
            <label for="DepositAmount">Enter Deposit Amount</label>
            <input id="DepositAmount"
                   v-model="DepositAmount"
                   type="number"
                   name="DepositAmount">
        </p>
        <p>
            <input type="submit" value="Submit" v-on:click="CheckMortgage">
        </p>
    </form>
    <div id="MortgageSearchResults" v-show="Visible">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Bank</th>
                    <th scope="col">Interest Rate</th>
                    <th scope="col">Type</th>
                </tr>
            </thead>
            <tbody>
                <transition-group name="Results-List" tag="tr">
                    <tr v-for="item in Results" :key="item.id">
                        <th scope="row">{{ item.Bank }}</th>
                        <td>{{ item.InterestRate }}</td>
                        <td>{{ item.Type }}</td>
                    </tr>
                </transition-group>
            </tbody>
        </table>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var UserUniqueID = "";
    var MortgageSearchResults = new Vue({
        el: '#MortgageSearchResults',
        data: {
            Visible: false,
            Results: []
        },
        methods: {
            flush() {
                this.Results.splice(0);
            }
        }
    });
    const MortgageDetails = new Vue({
        el: '#MortgageDetails',
        data: {
            errors: [],
            PropertyValue: null,
            DepositAmount: null,
            Visible: false
        },
        methods: {
            CheckMortgage: function (e) {
                if (this.PropertyValue && this.DepositAmount) {
                    PostPropertyData(this)
                }

                this.errors = [];

                if (!this.PropertyValue) {
                    this.errors.push('PropertyValue required.');
                }
                if (!this.DepositAmount) {
                    this.errors.push('DepositAmount required.');
                }
                e.preventDefault();
            }
        }
    });
    const UserDetails = new Vue({
        el: '#UserDetails',
        data: {
            errors: [],
            Forname: null,
            Surname: null,
            DateOfBirth: null,
            Email: null,
            Visible: true
        },
        methods: {
            CheckDetails: function (e) {
                if (this.Forname && this.Surname && this.Email && this.DateOfBirth) {
                    PostUserData(this)
                }

                this.errors = [];
                if (!this.DateOfBirth) {
                    this.errors.push('Date Of Birth required.');
                }
                if (!this.Forname) {
                    this.errors.push('Forname required.');
                }
                if (!this.Surname) {
                    this.errors.push('Surname required.');
                }
                if (!this.Email) {
                    this.errors.push('Email required.');
                }
                e.preventDefault();
            }
        }
    });

    function PostPropertyData(Data) {
        axios.get('/API/MortgageSearch', {
            params: {
                PropertyValue: Data.PropertyValue,
                DepositAmount: Data.DepositAmount,
                UniqueId: UserUniqueID,
            }
        })
            .then(function (response) {
                MortgageSearchResults.flush();
                MortgageSearchResults._data.Visible = true;
                if (response.data == "Deposit To Low For Loan Amount") {
                    MortgageSearchResults._data.Results.push({ InterestRate: "No Results Found" })
                }
                else {
                    response.data.forEach(element => MortgageSearchResults._data.Results.push({ id: element.id, Bank: element.bank, InterestRate: element.interestRate + "%", Type: element.type }));
                }
            })
            .catch(function (error) {
                console.log(error);
            });
    }
    function PostUserData(Data) {
        axios.get('/API/ApplicantRequest', {
            params: {
                Forname: Data.Forname,
                Surname: Data.Surname,
                Email: Data.Email,
                DateOfBirth: Data.DateOfBirth
            }
        })
            .then(function (response) {
                if (response.data == "Age Below 18") {
                    UserDetails.errors.push('Sorry, You need to be at least 18 to apply');
                }
                else {
                    MortgageDetails._data.Visible = true;
                    UserDetails._data.Visible = false;
                    UserUniqueID = response.data;
                }
            })
            .catch(function (error) {
                console.log(error);
            });
    }
</script>